{
    tokens = [
NUMBER="regexp:([0-9])*(\.([0-9])+)?"
INT="regexp:this one has been deactivated"
ID="regexp:\^?([a-z]|[A-Z]|_)([a-z]|[A-Z]|_|[0-9])*"
INT="regexp:([0-9])+"
STRING="regexp:\"(\\.|[^\\\"])*\"|'(\\.|[^\\'])*'"
ML_COMMENT="regexp:/\*(?s).*\*/"
SL_COMMENT="regexp://[^\n\r]*(\r?\n)?"
WS="regexp:( |\t|\r|\n)+"
ANY_OTHER="regexp:."
      MODULE_KEYWORD = 'module'
      IMPORT_KEYWORD = 'import'
      DEF_KEYWORD = 'def'
      L_BRACKET_KEYWORD = '('
      COMMA_KEYWORD = ','
      R_BRACKET_KEYWORD = ')'
      COLON_KEYWORD = ':'
      SEMICOLON_KEYWORD = ';'
      PLUS_KEYWORD = '+'
      MINUS_KEYWORD = '-'
      ASTERISK_KEYWORD = '*'
      SLASH_KEYWORD = '/'
    ]
    parserClass="com.intellij.calcLanguage.calc.parser.CalcParser"
        
    extends="com.intellij.calcLanguage.calc.psi.impl.CalcPsiCompositeElementImpl"
    psiClassPrefix="Calc"
    psiImplClassSuffix="Impl"
    psiPackage="com.intellij.calcLanguage.calc.psi"
    psiImplPackage="com.intellij.calcLanguage.calc.impl"
    elementTypeHolderClass="com.intellij.calcLanguage.calc.psi.CalcTypes"
    elementTypeClass="com.intellij.calcLanguage.calc.psi.CalcElementType"
    tokenTypeClass="com.intellij.calcLanguage.calc.psi.CalcTokenType"
    parserUtilClass= "com.intellij.languageUtil.parserUtilBase.GeneratedParserUtilBaseCopy"
    psiImplUtilClass="com.intellij.calcLanguage.calc.psi.impl.CalcPsiImplUtil"
    generateTokenAccessors=true
    generateTokens=true
    extraRoot(".*")= true
}
CalcFile ::= Module
Module ::= 'module' ID ( Import ) * ( Statement ) * 
{
mixin="com.intellij.calcLanguage.calc.psi.impl.CalcNamedElementImpl"
implements="com.intellij.psi.PsiNameIdentifierOwner"
methods=[ getName setName getNameIdentifier ]
}

Import ::= 'import' REFERENCE_Module_ID 

Statement ::= Definition | Evaluation 

Definition ::= 'def' ID ( '(' DeclaredParameter ( ',' DeclaredParameter ) * ')' ) ? ':' Expression ';' 

DeclaredParameter ::= ID 

AbstractDefinition ::= Definition | DeclaredParameter 
{
mixin="com.intellij.calcLanguage.calc.psi.impl.CalcNamedElementImpl"
implements="com.intellij.psi.PsiNameIdentifierOwner"
methods=[ getName setName getNameIdentifier ]
}

Evaluation ::= Expression ';' 

Expression ::= Addition 

Addition ::= Multiplication ( ( '+' | '-' ) MultiplicationAdditionRight ) * 

Multiplication ::= MultiplicationPrivate 
{
extends=MultiplicationAPI
}

PrimaryExpression1 ::= '(' Expression ')' 

PrimaryExpression2 ::= NUMBER 

PrimaryExpression3 ::= REFERENCE_AbstractDefinition_ID ( '(' Expression ( ',' Expression ) * ')' ) ? 

PrimaryExpression ::= PrimaryExpressionPrivate 
{
extends=PrimaryExpressionAPI
}

REFERENCE_Module_ID ::= ID 

REFERENCE_AbstractDefinition_ID ::= ID 

private MultiplicationPrivate ::= PrimaryExpression ( ( '*' | '/' ) PrimaryExpressionMultiplicationRight ) * 

MultiplicationAPI ::= MultiplicationPrivate 

MultiplicationAdditionRight ::= MultiplicationPrivate 
{
extends=MultiplicationAPI
}

private PrimaryExpressionPrivate ::= PrimaryExpression1 | PrimaryExpression2 | PrimaryExpression3 

PrimaryExpressionAPI ::= PrimaryExpressionPrivate 

PrimaryExpressionMultiplicationRight ::= PrimaryExpressionPrivate 
{
extends=PrimaryExpressionAPI
}

