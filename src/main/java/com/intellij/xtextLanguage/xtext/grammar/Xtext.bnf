{
    tokens = [
      ID ="regexp:\^?([a-z]|[A-Z]|_)([a-z]|[A-Z]|_|[0-9])*"
      INT ="regexp:([0-9])+"
      STRING ="regexp:\"(\\.|[^\\\"])*\"|'(\\.|[^\\'])*'"
      ML_COMMENT ="regexp:/\*(?s).*\*/"
      SL_COMMENT ="regexp://[^\n\r]*(\r?\n)?"
      WS ="regexp:( |\t|\r|\n)+"
      ANY_OTHER ="regexp:."
      GENERATE_KEYWORD = 'generate'
      IMPORT_KEYWORD = 'import'
      GRAMMAR_KEYWORD = 'grammar'
      PLUS_KEYWORD = '+'
      HIDDEN_KEYWORD = 'hidden'
      R_BRACKET_KEYWORD = ')'
      RETURNS_KEYWORD = 'returns'
      CURRENT_KEYWORD = 'current'
      ACX_MARK_KEYWORD = '!'
      PRED_KEYWORD = '=>'
      AT_SIGN_KEYWORD = '@'
      R_ANGLE_BRACKET_KEYWORD = '>'
      QUES_EQUALS_KEYWORD = '?='
      WITH_KEYWORD = 'with'
      R_SQUARE_BRACKET_KEYWORD = ']'
      L_ANGLE_BRACKET_KEYWORD = '<'
      PIPE_KEYWORD = '|'
      L_SQUARE_BRACKET_KEYWORD = '['
      COLON_KEYWORD = ':'
      WEAK_PRED_KEYWORD = '->'
      DOT_KEYWORD = '.'
      FALSE_KEYWORD = 'false'
      COMMA_KEYWORD = ','
      ASTERISK_KEYWORD = '*'
      L_BRACKET_KEYWORD = '('
      AMPERSAND_KEYWORD = '&'
      TERMINAL_KEYWORD = 'terminal'
      QUES_MARK_KEYWORD = '?'
      ENUM_KEYWORD = 'enum'
      EQUALS_KEYWORD = '='
      R_BRACE_KEYWORD = '}'
      COLONS_KEYWORD = '::'
      RANGE_KEYWORD = '..'
      SEMICOLON_KEYWORD = ';'
      L_BRACE_KEYWORD = '{'
      EOF_KEY_KEYWORD = 'EOF'
      TRUE_KEYWORD = 'true'
      FRAGMENT_KEYWORD = 'fragment'
      PLUS_EQUALS_KEYWORD = '+='
      AS_KEYWORD = 'as'
    ]
    parserClass="com.intellij.xtextLanguage.xtext.parser.XtextParser"
        
    extends="com.intellij.xtextLanguage.xtext.psi.impl.XtextPsiCompositeElementImpl"
    psiClassPrefix="Xtext"
    psiImplClassSuffix="Impl"
    psiPackage="com.intellij.xtextLanguage.xtext.psi"
    psiImplPackage="com.intellij.xtextLanguage.xtext.impl"

    elementTypeHolderClass="com.intellij.xtextLanguage.xtext.psi.XtextTypes"
    elementTypeClass="com.intellij.xtextLanguage.xtext.psi.XtextElementType"
    tokenTypeClass="com.intellij.xtextLanguage.xtext.psi.XtextTokenType"
    parserUtilClass= "com.intellij.languageUtil.parserUtilBase.GeneratedParserUtilBaseCopy"
    psiImplUtilClass="com.intellij.xtextLanguage.xtext.psi.impl.XtextPsiImplUtil"
    generateTokenAccessors=true
    generateTokens=true
    extraRoot(".*")= true
}
XtextFile ::= Grammar
Grammar ::= 'grammar' GrammarID ('with' REFERENCE_Grammar_GrammarID (',' REFERENCE_Grammar_GrammarID  )*  )? ('hidden' '(' (REFERENCE_AbstractRule_RuleID (',' REFERENCE_AbstractRule_RuleID  )*  )? ')'  )? AbstractMetamodelDeclaration * (AbstractRule  )+  
{
mixin="com.intellij.xtextLanguage.xtext.psi.impl.XtextNamedElementImpl"
implements="com.intellij.psi.PsiNameIdentifierOwner"
methods=[ getName setName getNameIdentifier ]
}
GrammarID ::= ValidID ('.' ValidID  )*  
AbstractRule ::= ParserRule |  TerminalRule |  EnumRule  
{
mixin="com.intellij.xtextLanguage.xtext.psi.impl.XtextNamedElementImpl"
implements="com.intellij.psi.PsiNameIdentifierOwner"
methods=[ getName setName getNameIdentifier ]
}
AbstractMetamodelDeclaration ::= GeneratedMetamodel |  ReferencedMetamodel  
{
mixin="com.intellij.xtextLanguage.xtext.psi.impl.XtextNamedElementImpl"
implements="com.intellij.psi.PsiNameIdentifierOwner"
methods=[ getName setName getNameIdentifier ]
}
GeneratedMetamodel ::= 'generate' ValidID REFERENCE_ecore-EPackage_STRING ('as' ValidID  )?  
ReferencedMetamodel ::= 'import' REFERENCE_ecore-EPackage_STRING ('as' ValidID  )?  
Annotation ::= '@' ID  
ParserRule ::= (Annotation  )* ('fragment' RuleNameAndParams ('*' |  ('returns' TypeRef  )?  )|  RuleNameAndParams ('returns' TypeRef  )?  )('hidden' '(' (REFERENCE_AbstractRule_RuleID (',' REFERENCE_AbstractRule_RuleID  )*  )? ')'  )? ':' Alternatives ';'  
RuleNameAndParams ::= ValidID ('<' (Parameter (',' Parameter  )*  )? '>'  )?  
Parameter ::= ID  
{
mixin="com.intellij.xtextLanguage.xtext.psi.impl.XtextNamedElementImpl"
implements="com.intellij.psi.PsiNameIdentifierOwner"
methods=[ getName setName getNameIdentifier ]
}
TypeRef ::= (REFERENCE_AbstractMetamodelDeclaration '::'  )? REFERENCE_ecore-EClassifier  
Alternatives ::= ConditionalBranch (('|' ConditionalBranch  )+  )?  
RuleFromConditionalBranchBranch2 ::= '<' Disjunction '>' (AbstractToken  )+  
ConditionalBranch ::= UnorderedGroup |  RuleFromConditionalBranchBranch2  
UnorderedGroup ::= Group (('&' Group  )+  )?  
Group ::= AbstractToken ((AbstractToken  )+  )?  
AbstractToken ::= AbstractTokenWithCardinality |  Action  
AbstractTokenWithCardinality ::= (Assignment |  AbstractTerminal  )('?' |  '*' |  '+'  ) ?  
Action ::= '{' TypeRef ('.' ValidID ('=' |  '+='  ) 'current'  )? '}'  
AbstractTerminal ::= Keyword |  RuleCall |  ParenthesizedElement |  PredicatedKeyword |  PredicatedRuleCall |  PredicatedGroup  
Keyword ::= STRING  
RuleCall ::= REFERENCE_AbstractRule_RuleID ('<' NamedArgument (',' NamedArgument  )* '>'  )?  
NamedArgument ::= (REFERENCE_Parameter_ID '='  )? (Disjunction  ) 
RuleFromLiteralConditionBranch1 ::= ('true' |  'false'  ) 
LiteralCondition ::= RuleFromLiteralConditionBranch1  
Disjunction ::= Conjunction ('|' Conjunction  )*  
Conjunction ::= Negation ('&' Negation  )*  
RuleFromNegationBranch2 ::= '!' Negation  
Negation ::= Atom |  RuleFromNegationBranch2  
Atom ::= ParameterReference |  ParenthesizedCondition |  LiteralCondition  
ParenthesizedCondition ::= '(' Disjunction ')'  
ParameterReference ::= REFERENCE_Parameter_ID  
TerminalRuleCall ::= REFERENCE_AbstractRule_RuleID  
RuleID ::= ValidID ('::' ValidID  )*  
ValidID ::= ID |  'true' |  'false'  
PredicatedKeyword ::= ('=>' |  '->'  )STRING  
PredicatedRuleCall ::= ('=>' |  '->'  )REFERENCE_AbstractRule_RuleID ('<' NamedArgument (',' NamedArgument  )* '>'  )?  
Assignment ::= ('=>' |  '->'  )? ValidID ('+=' |  '=' |  '?='  ) AssignableTerminal  
AssignableTerminal ::= Keyword |  RuleCall |  ParenthesizedAssignableElement |  CrossReference  
ParenthesizedAssignableElement ::= '(' AssignableAlternatives ')'  
AssignableAlternatives ::= AssignableTerminal (('|' AssignableTerminal  )+  )?  
CrossReference ::= '[' TypeRef ('|' CrossReferenceableTerminal  )? ']'  
CrossReferenceableTerminal ::= Keyword |  RuleCall  
ParenthesizedElement ::= '(' Alternatives ')'  
PredicatedGroup ::= ('=>' |  '->'  )'(' Alternatives ')'  
TerminalRule ::= (Annotation  )* 'terminal' ('fragment' ValidID |  ValidID ('returns' TypeRef  )?  )':' TerminalAlternatives ';'  
TerminalAlternatives ::= TerminalGroup (('|' TerminalGroup  )+  )?  
TerminalGroup ::= TerminalToken ((TerminalToken  )+  )?  
TerminalToken ::= TerminalTokenElement ('?' |  '*' |  '+'  ) ?  
TerminalTokenElement ::= CharacterRange |  TerminalRuleCall |  ParenthesizedTerminalElement |  AbstractNegatedToken |  Wildcard |  CaretEOF  
ParenthesizedTerminalElement ::= '(' TerminalAlternatives ')'  
AbstractNegatedToken ::= NegatedToken |  UntilToken  
NegatedToken ::= '!' TerminalTokenElement  
UntilToken ::= '->' TerminalTokenElement  
RuleFromWildcardBranch1 ::= '.'  
Wildcard ::= RuleFromWildcardBranch1  
RuleFromCaretEOFBranch1 ::= 'EOF'  
CaretEOF ::= RuleFromCaretEOFBranch1  
CharacterRange ::= Keyword ('..' Keyword  )?  
EnumRule ::= (Annotation  )* 'enum' ValidID ('returns' TypeRef  )? ':' EnumLiterals ';'  
EnumLiterals ::= EnumLiteralDeclaration (('|' EnumLiteralDeclaration  )+  )?  
EnumLiteralDeclaration ::= REFERENCE_ecore-EEnumLiteral ('=' Keyword  )?  
REFERENCE_Grammar_GrammarID ::= GrammarID
REFERENCE_AbstractRule_RuleID ::= RuleID
REFERENCE_ecore-EPackage_STRING ::= STRING
REFERENCE_AbstractMetamodelDeclaration ::= ID
REFERENCE_ecore-EClassifier ::= ID
REFERENCE_Parameter_ID ::= ID
REFERENCE_ecore-EEnumLiteral ::= ID
