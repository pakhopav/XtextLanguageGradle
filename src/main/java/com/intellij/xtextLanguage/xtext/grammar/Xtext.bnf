{
    tokens = [
ID = "ID"
INT = "INT"
STRING = "STRING"
ML_COMMENT = "ML_COMMENT"
SL_COMMENT = "SL_COMMENT"
WS = "WS"
ANY_OTHER = "ANY_OTHER"
      GRAMMAR_KEYWORD = 'grammar'
      WITH_KEYWORD = 'with'
      COMMA_KEYWORD = ','
      HIDDEN_KEYWORD = 'hidden'
      L_BRACKET_KEYWORD = '('
      R_BRACKET_KEYWORD = ')'
      DOT_KEYWORD = '.'
      GENERATE_KEYWORD = 'generate'
      AS_KEYWORD = 'as'
      IMPORT_KEYWORD = 'import'
      AT_SIGN_KEYWORD = '@'
      FRAGMENT_KEYWORD = 'fragment'
      ASTERISK_KEYWORD = '*'
      RETURNS_KEYWORD = 'returns'
      COLON_KEYWORD = ':'
      SEMICOLON_KEYWORD = ';'
      L_ANGLE_BRACKET_KEYWORD = '<'
      R_ANGLE_BRACKET_KEYWORD = '>'
      COLONS_KEYWORD = '::'
      PIPE_KEYWORD = '|'
      AMPERSAND_KEYWORD = '&'
      QUES_MARK_KEYWORD = '?'
      PLUS_KEYWORD = '+'
      L_BRACE_KEYWORD = '{'
      EQUALS_KEYWORD = '='
      PLUS_EQUALS_KEYWORD = '+='
      CURRENT_KEYWORD = 'current'
      R_BRACE_KEYWORD = '}'
      TRUE_KEYWORD = 'true'
      FALSE_KEYWORD = 'false'
      ACX_MARK_KEYWORD = '!'
      PRED_KEYWORD = '=>'
      WEAK_PRED_KEYWORD = '->'
      QUES_EQUALS_KEYWORD = '?='
      L_SQUARE_BRACKET_KEYWORD = '['
      R_SQUARE_BRACKET_KEYWORD = ']'
      TERMINAL_KEYWORD = 'terminal'
      EOF_KEYWORD = 'EOF'
      RANGE_KEYWORD = '..'
      ENUM_KEYWORD = 'enum'
    ]
    parserClass="com.intellij.xtextLanguage.xtext.parser.XtextParser"
        
    extends="com.intellij.xtextLanguage.xtext.psi.impl.XtextPsiCompositeElementImpl"
    psiClassPrefix="Xtext"
    psiImplClassSuffix="Impl"
    psiPackage="com.intellij.xtextLanguage.xtext.psi"
    psiImplPackage="com.intellij.xtextLanguage.xtext.impl"
    elementTypeHolderClass="com.intellij.xtextLanguage.xtext.psi.XtextTypes"
    elementTypeClass="com.intellij.xtextLanguage.xtext.psi.XtextElementType"
    tokenTypeClass="com.intellij.xtextLanguage.xtext.psi.XtextTokenType"
    parserUtilClass= "com.intellij.languageUtil.parserUtilBase.GeneratedParserUtilBaseCopy"
    psiImplUtilClass="com.intellij.xtextLanguage.xtext.psi.impl.XtextPsiImplUtil"
    generateTokenAccessors=true
    generateTokens=true
    extraRoot(".*")= true
}
XtextFile ::= Grammar
Grammar ::= 'grammar' GrammarID ('with' REFERENCE_Grammar_GrammarID (',' REFERENCE_Grammar_GrammarID)*)? ('hidden' '(' (REFERENCE_AbstractRule_RuleID (',' REFERENCE_AbstractRule_RuleID)*)? ')')? AbstractMetamodelDeclaration* (AbstractRule)+ 
{
mixin="com.intellij.xtextLanguage.xtext.psi.impl.XtextNamedElementImpl"
implements="com.intellij.psi.PsiNameIdentifierOwner"
methods=[ getName setName getNameIdentifier ]
}

GrammarID ::= ValidID ('.' ValidID)* 

AbstractRule ::= ParserRule | TerminalRule | EnumRule 
{
mixin="com.intellij.xtextLanguage.xtext.psi.impl.XtextNamedElementImpl"
implements="com.intellij.psi.PsiNameIdentifierOwner"
methods=[ getName setName getNameIdentifier ]
}

AbstractMetamodelDeclaration ::= GeneratedMetamodel | ReferencedMetamodel 
{
mixin="com.intellij.xtextLanguage.xtext.psi.impl.XtextNamedElementImpl"
implements="com.intellij.psi.PsiNameIdentifierOwner"
methods=[ getName setName getNameIdentifier ]
}

GeneratedMetamodel ::= 'generate' ValidID REFERENCE_EPackage_STRING ('as' ValidID1)? 
{
extends=AbstractMetamodelDeclaration
}

ReferencedMetamodel ::= 'import' REFERENCE_EPackage_STRING ('as' ValidID)? 
{
extends=AbstractMetamodelDeclaration
}
Annotation ::= '@' ID 

ParserRule ::= (Annotation)* ('fragment' RuleNameAndParams ('*' | ('returns' TypeRef)?) | RuleNameAndParams ('returns' TypeRef)?) ('hidden' '(' (REFERENCE_AbstractRule_RuleID (',' REFERENCE_AbstractRule_RuleID)*)? ')')? ':' Alternatives ';' 
{
extends=AbstractRule
}

private RuleNameAndParams ::= ValidID ('<' (Parameter (',' Parameter)*)? '>')? 

Parameter ::= ID 
{
mixin="com.intellij.xtextLanguage.xtext.psi.impl.XtextNamedElementImpl"
implements="com.intellij.psi.PsiNameIdentifierOwner"
methods=[ getName setName getNameIdentifier ]
}

TypeRef ::= (REFERENCE_AbstractMetamodelDeclaration_ID '::')? REFERENCE_EClassifier_ID 

Alternatives ::= ConditionalBranch AlternativesSuffix1? 

AlternativesSuffix1 ::= ('|' ConditionalBranch)+ 
{
implements="com.intellij.xtextLanguage.xtext.psi.SuffixElement"
}

ConditionalBranch ::= UnorderedGroup | '<' Disjunction '>' (AbstractToken)+ 

UnorderedGroup ::= Group UnorderedGroupSuffix1? 

UnorderedGroupSuffix1 ::= ('&' Group)+ 
{
implements="com.intellij.xtextLanguage.xtext.psi.SuffixElement"
}

Group ::= AbstractToken GroupSuffix1? 

GroupSuffix1 ::= (AbstractToken)+ 
{
implements="com.intellij.xtextLanguage.xtext.psi.SuffixElement"
}

AbstractToken ::= AbstractTokenWithCardinality | Action 

AbstractTokenWithCardinality ::= (Assignment | AbstractTerminal) ('?' | '*' | '+')? 

Action ::= '{' TypeRef ('.' ValidID ('=' | '+=') 'current')? '}' 

AbstractTerminal ::= Keyword | RuleCall | ParenthesizedElement | PredicatedKeyword | PredicatedRuleCall | PredicatedGroup 

Keyword ::= KeywordPrivate 

Keyword1 ::= KeywordPrivate 
{
extends=Keyword
}

private KeywordPrivate ::= STRING 

RuleCall ::= REFERENCE_AbstractRule_RuleID ('<' NamedArgument (',' NamedArgument)* '>')? 

NamedArgument ::= (REFERENCE_Parameter_ID '=')? (Disjunction) 

LiteralCondition ::= ('true' | 'false') 

Disjunction ::= Conjunction ('|' Conjunction1)* 

Conjunction ::= ConjunctionPrivate 

Conjunction1 ::= ConjunctionPrivate 
{
extends=Conjunction
}

private ConjunctionPrivate ::= Negation ('&' Negation1)* 

Negation ::= NegationPrivate 

Negation1 ::= NegationPrivate 
{
extends=Negation
}

private NegationPrivate ::= Atom | '!' Negation 

Atom ::= ParameterReference | ParenthesizedCondition | LiteralCondition 

ParenthesizedCondition ::= '(' Disjunction ')' 

ParameterReference ::= REFERENCE_Parameter_ID 

TerminalRuleCall ::= REFERENCE_AbstractRule_RuleID 

RuleID ::= ValidID ('::' ValidID)* 

ValidID ::= ID | 'true' | 'false' 

PredicatedKeyword ::= ('=>' | '->') STRING 

PredicatedRuleCall ::= ('=>' | '->') REFERENCE_AbstractRule_RuleID ('<' NamedArgument (',' NamedArgument)* '>')? 

Assignment ::= ('=>' | '->')? ValidID ('+=' | '=' | '?=') AssignableTerminal 

AssignableTerminal ::= Keyword | RuleCall | ParenthesizedAssignableElement | CrossReference 

ParenthesizedAssignableElement ::= '(' AssignableAlternatives ')' 

AssignableAlternatives ::= AssignableTerminal AssignableAlternativesSuffix1? 

AssignableAlternativesSuffix1 ::= ('|' AssignableTerminal)+ 
{
implements="com.intellij.xtextLanguage.xtext.psi.SuffixElement"
}

CrossReference ::= '[' TypeRef ('|' CrossReferenceableTerminal)? ']' 

CrossReferenceableTerminal ::= Keyword | RuleCall 

ParenthesizedElement ::= '(' Alternatives ')' 

PredicatedGroup ::= ('=>' | '->') '(' Alternatives ')' 

TerminalRule ::= (Annotation)* 'terminal' ('fragment' ValidID | ValidID ('returns' TypeRef)?) ':' TerminalAlternatives ';' 
{
extends=AbstractRule
}

TerminalAlternatives ::= TerminalGroup TerminalAlternativesSuffix1? 

TerminalAlternativesSuffix1 ::= ('|' TerminalGroup)+ 
{
implements="com.intellij.xtextLanguage.xtext.psi.SuffixElement"
}

TerminalGroup ::= TerminalToken TerminalGroupSuffix1? 

TerminalGroupSuffix1 ::= (TerminalToken)+ 
{
implements="com.intellij.xtextLanguage.xtext.psi.SuffixElement"
}

TerminalToken ::= TerminalTokenElement ('?' | '*' | '+')? 

TerminalTokenElement ::= CharacterRange | TerminalRuleCall | ParenthesizedTerminalElement | AbstractNegatedToken | Wildcard | EOF 

ParenthesizedTerminalElement ::= '(' TerminalAlternatives ')' 

AbstractNegatedToken ::= NegatedToken | UntilToken 

NegatedToken ::= '!' TerminalTokenElement 

UntilToken ::= '->' TerminalTokenElement 

Wildcard ::= '.' 

EOF ::= 'EOF' 

CharacterRange ::= Keyword ('..' Keyword1)? 

EnumRule ::= (Annotation)* 'enum' ValidID ('returns' TypeRef)? ':' EnumLiterals ';' 
{
extends=AbstractRule
}

EnumLiterals ::= EnumLiteralDeclaration EnumLiteralsSuffix1? 

EnumLiteralsSuffix1 ::= ('|' EnumLiteralDeclaration)+ 
{
implements="com.intellij.xtextLanguage.xtext.psi.SuffixElement"
}

EnumLiteralDeclaration ::= REFERENCE_EEnumLiteral_ID ('=' Keyword)? 

REFERENCE_Grammar_GrammarID ::= GrammarID 

REFERENCE_AbstractRule_RuleID ::= RuleID 

REFERENCE_EPackage_STRING ::= STRING 

REFERENCE_AbstractMetamodelDeclaration_ID ::= ID 

REFERENCE_EClassifier_ID ::= ID 

REFERENCE_Parameter_ID ::= ID 

REFERENCE_EEnumLiteral_ID ::= ID 

ValidID1 ::= ValidID 

