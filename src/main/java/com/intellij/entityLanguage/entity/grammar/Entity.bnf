{
    tokens = [
ID="regexp:\^?([a-z]|[A-Z]|_)([a-z]|[A-Z]|_|[0-9])*"
INT="regexp:([0-9])+"
STRING="regexp:\"(\\.|[^\\\"])*\"|'(\\.|[^\\'])*'"
ML_COMMENT="regexp:/\*(?s).*\*/"
SL_COMMENT="regexp://[^\n\r]*(\r?\n)?"
WS="regexp:( |\t|\r|\n)+"
ANY_OTHER="regexp:."
      DATATYPE_KEYWORD = 'datatype'
      ENTITY_KEYWORD = 'entity'
      EXTENDS_KEYWORD = 'extends'
      L_BRACE_KEYWORD = '{'
      R_BRACE_KEYWORD = '}'
      MANY_KEYWORD = 'many'
      COLON_KEYWORD = ':'
    ]
    parserClass="com.intellij.entityLanguage.entity.parser.EntityParser"
        
    extends="com.intellij.entityLanguage.entity.psi.impl.EntityPsiCompositeElementImpl"
    psiClassPrefix="Entity"
    psiImplClassSuffix="Impl"
    psiPackage="com.intellij.entityLanguage.entity.psi"
    psiImplPackage="com.intellij.entityLanguage.entity.impl"

    elementTypeHolderClass="com.intellij.entityLanguage.entity.psi.EntityTypes"
    elementTypeClass="com.intellij.entityLanguage.entity.psi.EntityElementType"
    tokenTypeClass="com.intellij.entityLanguage.entity.psi.EntityTokenType"
    parserUtilClass= "com.intellij.languageUtil.parserUtilBase.GeneratedParserUtilBaseCopy"
    psiImplUtilClass="com.intellij.entityLanguage.entity.psi.impl.EntityPsiImplUtil"
    generateTokenAccessors=true
    generateTokens=true
    extraRoot(".*")= true
}
EntityFile ::= Domainmodel
Domainmodel ::= ( Type ) * 
Type ::= DataType | Entity 
{
mixin="com.intellij.entityLanguage.entity.psi.impl.EntityNamedElementImpl"
implements="com.intellij.psi.PsiNameIdentifierOwner"
methods=[ getName setName getNameIdentifier ]
}
DataType ::= 'datatype' ID 
Entity ::= 'entity' ID ( 'extends' REFERENCE_Entity_ID ) ? '{' ( Feature ) * '}' 
{
mixin="com.intellij.entityLanguage.entity.psi.impl.EntityNamedElementImpl"
implements="com.intellij.psi.PsiNameIdentifierOwner"
methods=[ getName setName getNameIdentifier ]
}
Feature ::= ( 'many' ) ? ID ':' REFERENCE_Type_ID 
REFERENCE_Entity_ID ::= ID
REFERENCE_Type_ID ::= ID
