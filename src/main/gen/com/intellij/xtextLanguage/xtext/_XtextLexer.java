/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.intellij.xtextLanguage.xtext;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.xtextLanguage.xtext.psi.XtextTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Xtext.flex</tt>
 */
public class _XtextLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
          "\11\0\1\15\1\6\2\10\1\7\22\0\1\15\1\37\1\4\3\0\1\60\1\12\1\57\1\33\1\14\1" +
                  "\30\1\56\1\52\1\53\1\13\12\3\1\51\1\62\1\46\1\40\1\41\1\43\1\42\4\2\1\64\1" +
                  "\66\10\2\1\65\13\2\1\50\1\5\1\45\1\1\1\2\1\0\1\22\1\2\1\36\1\32\1\17\1\54" +
                  "\1\16\1\31\1\24\2\2\1\55\1\25\1\20\1\27\1\26\1\2\1\21\1\35\1\23\1\34\1\2\1" +
                  "\44\3\2\1\63\1\47\1\61\7\0\1\11\242\0\2\11\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\1\0\2\1\1\2\1\3\1\1\1\4\1\5\2\1" +
                  "\1\6\6\2\1\7\1\2\1\10\1\2\1\11\1\12" +
                  "\1\13\1\14\1\15\1\2\1\16\1\17\1\20\1\21" +
                  "\1\22\1\1\1\23\1\2\1\24\1\25\1\26\1\27" +
                  "\1\30\1\31\1\2\1\0\1\32\3\0\1\33\1\0" +
                  "\4\2\1\34\3\2\1\35\2\2\1\36\1\37\1\2" +
                  "\1\40\1\41\1\42\3\2\1\33\2\0\14\2\1\43" +
                  "\1\44\1\0\2\2\1\45\2\2\1\46\3\2\1\47" +
                  "\2\2\2\0\10\2\1\50\1\44\4\2\1\51\1\52" +
                  "\3\2\1\53\1\54\1\2\1\55\1\2\1\56\1\57" +
                  "\1\60";
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\67" +
                    "\0\u0181\0\u01b8\0\67\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb" +
                    "\0\u0302\0\u0339\0\u0370\0\67\0\u03a7\0\67\0\u03de\0\67" +
                    "\0\67\0\u0415\0\u044c\0\67\0\67\0\67\0\67\0\u0483" +
                    "\0\u04ba\0\u04f1\0\u0528\0\67\0\67\0\67\0\67\0\67" +
                    "\0\67\0\u055f\0\u0113\0\67\0\u0596\0\u0181\0\u05cd\0\u0604" +
                    "\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\245\0\u074e\0\u0785" +
                    "\0\u07bc\0\67\0\u07f3\0\u082a\0\67\0\67\0\u0861\0\67" +
                    "\0\67\0\67\0\u0898\0\u08cf\0\u0906\0\67\0\u093d\0\u0974" +
                    "\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c" +
                    "\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\245\0\u0c3f\0\u0c76\0\u0cad" +
                    "\0\u0ce4\0\245\0\u0d1b\0\u0d52\0\245\0\u0d89\0\u0dc0\0\u0df7" +
                    "\0\245\0\u0e2e\0\u0e65\0\u0e9c\0\u0c3f\0\u0ed3\0\u0f0a\0\u0f41" +
                    "\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\245\0\67\0\u108b" +
                    "\0\u10c2\0\u10f9\0\u1130\0\245\0\245\0\u1167\0\u119e\0\u11d5" +
                    "\0\245\0\245\0\u120c\0\245\0\u1243\0\245\0\245\0\245";

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();
  private static final String ZZ_TRANS_PACKED_0 =
          "\1\2\1\3\1\4\1\5\1\6\1\2\3\7\1\10" +
                  "\1\11\1\12\1\13\1\7\1\14\1\15\1\4\1\16" +
                  "\1\17\1\20\1\21\3\4\1\22\1\23\1\4\1\24" +
                  "\2\4\1\25\1\26\1\27\1\30\1\31\1\32\1\33" +
                  "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43" +
                  "\1\4\1\44\1\45\1\46\1\47\1\50\1\51\1\52" +
                  "\2\4\71\0\1\4\13\0\12\4\1\0\2\4\1\0" +
                  "\3\4\5\0\1\4\7\0\2\4\6\0\3\4\2\0" +
                  "\2\4\12\0\12\4\1\0\2\4\1\0\3\4\5\0" +
                  "\1\4\7\0\2\4\6\0\3\4\3\0\1\5\63\0" +
                  "\4\53\1\54\1\55\61\53\6\0\3\7\4\0\1\7" +
                  "\51\0\5\56\1\57\4\56\1\54\54\56\13\0\1\60" +
                  "\1\61\54\0\2\4\12\0\1\4\1\62\1\4\1\63" +
                  "\6\4\1\0\2\4\1\0\3\4\5\0\1\4\7\0" +
                  "\2\4\6\0\3\4\2\0\2\4\12\0\2\4\1\64" +
                  "\7\4\1\0\2\4\1\0\3\4\5\0\1\4\7\0" +
                  "\2\4\6\0\3\4\2\0\2\4\12\0\1\4\1\65" +
                  "\10\4\1\0\2\4\1\0\3\4\5\0\1\4\7\0" +
                  "\2\4\6\0\3\4\2\0\2\4\12\0\12\4\1\0" +
                  "\2\4\1\0\1\4\1\66\1\4\5\0\1\4\7\0" +
                  "\2\4\6\0\3\4\2\0\2\4\12\0\1\4\1\67" +
                  "\1\4\1\70\6\4\1\0\2\4\1\0\3\4\5\0" +
                  "\1\4\7\0\2\4\6\0\3\4\2\0\2\4\12\0" +
                  "\7\4\1\71\2\4\1\0\2\4\1\0\3\4\5\0" +
                  "\1\4\7\0\2\4\6\0\3\4\40\0\1\72\30\0" +
                  "\2\4\12\0\6\4\1\73\3\4\1\0\2\4\1\0" +
                  "\3\4\5\0\1\4\7\0\2\4\6\0\3\4\2\0" +
                  "\2\4\12\0\12\4\1\0\2\4\1\0\1\74\2\4" +
                  "\5\0\1\4\7\0\2\4\6\0\3\4\41\0\1\75" +
                  "\65\0\1\76\30\0\2\4\12\0\6\4\1\77\3\4" +
                  "\1\0\2\4\1\0\3\4\5\0\1\4\7\0\2\4" +
                  "\6\0\3\4\51\0\1\100\56\0\1\101\100\0\1\102" +
                  "\15\0\2\4\12\0\3\4\1\103\1\104\5\4\1\0" +
                  "\2\4\1\0\3\4\5\0\1\4\7\0\2\4\6\0" +
                  "\3\4\2\0\2\4\12\0\12\4\1\0\2\4\1\0" +
                  "\3\4\5\0\1\4\7\0\2\4\6\0\1\4\1\105" +
                  "\1\4\6\53\4\0\55\53\6\56\4\0\55\56\6\60" +
                  "\1\106\1\107\57\60\14\61\1\110\52\61\2\0\2\4" +
                  "\12\0\2\4\1\111\7\4\1\0\2\4\1\0\3\4" +
                  "\5\0\1\4\7\0\2\4\6\0\3\4\2\0\2\4" +
                  "\12\0\4\4\1\112\5\4\1\0\2\4\1\0\3\4" +
                  "\5\0\1\4\7\0\2\4\6\0\3\4\2\0\2\4" +
                  "\12\0\12\4\1\0\2\4\1\0\1\113\2\4\5\0" +
                  "\1\4\7\0\2\4\6\0\3\4\2\0\2\4\12\0" +
                  "\5\4\1\114\4\4\1\0\2\4\1\0\3\4\5\0" +
                  "\1\4\7\0\2\4\6\0\3\4\2\0\2\4\12\0" +
                  "\3\4\1\115\6\4\1\0\2\4\1\0\3\4\5\0" +
                  "\1\4\7\0\2\4\6\0\3\4\2\0\2\4\12\0" +
                  "\12\4\1\0\2\4\1\0\1\116\2\4\5\0\1\4" +
                  "\7\0\2\4\6\0\3\4\2\0\2\4\12\0\10\4" +
                  "\1\117\1\4\1\0\2\4\1\0\3\4\5\0\1\4" +
                  "\7\0\2\4\6\0\3\4\2\0\2\4\12\0\12\4" +
                  "\1\0\1\4\1\120\1\0\3\4\5\0\1\4\7\0" +
                  "\2\4\6\0\3\4\2\0\2\4\12\0\3\4\1\121" +
                  "\6\4\1\0\2\4\1\0\3\4\5\0\1\4\7\0" +
                  "\2\4\6\0\3\4\2\0\2\4\12\0\5\4\1\122" +
                  "\4\4\1\0\2\4\1\0\3\4\5\0\1\4\7\0" +
                  "\2\4\6\0\3\4\2\0\2\4\12\0\4\4\1\123" +
                  "\5\4\1\0\2\4\1\0\3\4\5\0\1\4\7\0" +
                  "\2\4\6\0\3\4\2\0\2\4\12\0\12\4\1\0" +
                  "\2\4\1\0\3\4\5\0\1\4\7\0\1\4\1\124" +
                  "\6\0\3\4\2\0\2\4\12\0\12\4\1\0\2\4" +
                  "\1\0\3\4\5\0\1\4\7\0\2\4\6\0\2\4" +
                  "\1\125\6\0\1\106\60\0\13\61\1\126\1\127\52\61" +
                  "\2\0\2\4\12\0\1\4\1\130\10\4\1\0\2\4" +
                  "\1\0\3\4\5\0\1\4\7\0\2\4\6\0\3\4" +
                  "\2\0\2\4\12\0\7\4\1\131\2\4\1\0\2\4" +
                  "\1\0\3\4\5\0\1\4\7\0\2\4\6\0\3\4" +
                  "\2\0\2\4\12\0\7\4\1\132\2\4\1\0\2\4" +
                  "\1\0\3\4\5\0\1\4\7\0\2\4\6\0\3\4" +
                  "\2\0\2\4\12\0\12\4\1\0\2\4\1\0\1\133" +
                  "\2\4\5\0\1\4\7\0\2\4\6\0\3\4\2\0" +
                  "\2\4\12\0\7\4\1\134\2\4\1\0\2\4\1\0" +
                  "\3\4\5\0\1\4\7\0\2\4\6\0\3\4\2\0" +
                  "\2\4\12\0\1\4\1\135\10\4\1\0\2\4\1\0" +
                  "\3\4\5\0\1\4\7\0\2\4\6\0\3\4\2\0" +
                  "\2\4\12\0\11\4\1\136\1\0\2\4\1\0\3\4" +
                  "\5\0\1\4\7\0\2\4\6\0\3\4\2\0\2\4" +
                  "\12\0\12\4\1\0\1\4\1\137\1\0\3\4\5\0" +
                  "\1\4\7\0\2\4\6\0\3\4\2\0\2\4\12\0" +
                  "\3\4\1\140\6\4\1\0\2\4\1\0\3\4\5\0" +
                  "\1\4\7\0\2\4\6\0\3\4\2\0\2\4\12\0" +
                  "\12\4\1\0\1\141\1\4\1\0\3\4\5\0\1\4" +
                  "\7\0\2\4\6\0\3\4\2\0\2\4\12\0\1\142" +
                  "\11\4\1\0\2\4\1\0\3\4\5\0\1\4\7\0" +
                  "\2\4\6\0\3\4\2\0\2\4\12\0\12\4\1\0" +
                  "\2\4\1\0\1\4\1\143\1\4\5\0\1\4\7\0" +
                  "\2\4\6\0\3\4\14\0\1\144\52\0\13\61\1\145" +
                  "\1\127\52\61\2\0\2\4\12\0\3\4\1\146\6\4" +
                  "\1\0\2\4\1\0\3\4\5\0\1\4\7\0\2\4" +
                  "\6\0\3\4\2\0\2\4\12\0\7\4\1\147\2\4" +
                  "\1\0\2\4\1\0\3\4\5\0\1\4\7\0\2\4" +
                  "\6\0\3\4\2\0\2\4\12\0\3\4\1\150\6\4" +
                  "\1\0\2\4\1\0\3\4\5\0\1\4\7\0\2\4" +
                  "\6\0\3\4\2\0\2\4\12\0\6\4\1\151\3\4" +
                  "\1\0\2\4\1\0\3\4\5\0\1\4\7\0\2\4" +
                  "\6\0\3\4\2\0\2\4\12\0\3\4\1\152\6\4" +
                  "\1\0\2\4\1\0\3\4\5\0\1\4\7\0\2\4" +
                  "\6\0\3\4\2\0\2\4\12\0\1\4\1\153\10\4" +
                  "\1\0\2\4\1\0\3\4\5\0\1\4\7\0\2\4" +
                  "\6\0\3\4\2\0\2\4\12\0\1\4\1\154\10\4" +
                  "\1\0\2\4\1\0\3\4\5\0\1\4\7\0\2\4" +
                  "\6\0\3\4\2\0\2\4\12\0\7\4\1\155\2\4" +
                  "\1\0\2\4\1\0\3\4\5\0\1\4\7\0\2\4" +
                  "\6\0\3\4\2\0\2\4\12\0\1\4\1\156\10\4" +
                  "\1\0\2\4\1\0\3\4\5\0\1\4\7\0\2\4" +
                  "\6\0\3\4\13\0\1\157\55\0\2\4\12\0\4\4" +
                  "\1\160\5\4\1\0\2\4\1\0\3\4\5\0\1\4" +
                  "\7\0\2\4\6\0\3\4\2\0\2\4\12\0\4\4" +
                  "\1\161\5\4\1\0\2\4\1\0\3\4\5\0\1\4" +
                  "\7\0\2\4\6\0\3\4\2\0\2\4\12\0\2\4" +
                  "\1\162\7\4\1\0\2\4\1\0\3\4\5\0\1\4" +
                  "\7\0\2\4\6\0\3\4\2\0\2\4\12\0\2\4" +
                  "\1\163\7\4\1\0\2\4\1\0\3\4\5\0\1\4" +
                  "\7\0\2\4\6\0\3\4\2\0\2\4\12\0\5\4" +
                  "\1\164\4\4\1\0\2\4\1\0\3\4\5\0\1\4" +
                  "\7\0\2\4\6\0\3\4\2\0\2\4\12\0\2\4" +
                  "\1\165\7\4\1\0\2\4\1\0\3\4\5\0\1\4" +
                  "\7\0\2\4\6\0\3\4\2\0\2\4\12\0\2\4" +
                  "\1\166\7\4\1\0\2\4\1\0\3\4\5\0\1\4" +
                  "\7\0\2\4\6\0\3\4\2\0\2\4\12\0\1\4" +
                  "\1\167\10\4\1\0\2\4\1\0\3\4\5\0\1\4" +
                  "\7\0\2\4\6\0\3\4\2\0\2\4\12\0\5\4" +
                  "\1\170\4\4\1\0\2\4\1\0\3\4\5\0\1\4" +
                  "\7\0\2\4\6\0\3\4\2\0\2\4\12\0\3\4" +
                  "\1\171\6\4\1\0\2\4\1\0\3\4\5\0\1\4" +
                  "\7\0\2\4\6\0\3\4\2\0\2\4\12\0\12\4" +
                  "\1\0\2\4\1\0\1\4\1\172\1\4\5\0\1\4" +
                  "\7\0\2\4\6\0\3\4\2\0\2\4\12\0\4\4" +
                  "\1\173\5\4\1\0\2\4\1\0\3\4\5\0\1\4" +
                  "\7\0\2\4\6\0\3\4\2\0\2\4\12\0\5\4" +
                  "\1\174\4\4\1\0\2\4\1\0\3\4\5\0\1\4" +
                  "\7\0\2\4\6\0\3\4\2\0\2\4\12\0\2\4" +
                  "\1\175\7\4\1\0\2\4\1\0\3\4\5\0\1\4" +
                  "\7\0\2\4\6\0\3\4\2\0\2\4\12\0\1\4" +
                  "\1\176\10\4\1\0\2\4\1\0\3\4\5\0\1\4" +
                  "\7\0\2\4\6\0\3\4\2\0\2\4\12\0\12\4" +
                  "\1\0\2\4\1\0\3\4\5\0\1\4\7\0\1\4" +
                  "\1\177\6\0\3\4\2\0\2\4\12\0\5\4\1\200" +
                  "\4\4\1\0\2\4\1\0\3\4\5\0\1\4\7\0" +
                  "\2\4\6\0\3\4";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\5\1\1\11\2\1\1\11\10\1\1\11" +
                    "\1\1\1\11\1\1\2\11\2\1\4\11\4\1\6\11" +
                    "\1\1\1\0\1\11\3\0\1\1\1\0\10\1\1\11" +
                    "\2\1\2\11\1\1\3\11\3\1\1\11\2\0\16\1" +
                    "\1\0\14\1\2\0\11\1\1\11\21\1";

    /* user code: */
    public _XtextLexer() {
        this((java.io.Reader) null);
    }

    private static int[] zzUnpackAction() {
        int[] result = new int[128];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[128];
    int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[4730];
    int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

    private static int[] zzUnpackAttribute() {
        int[] result = new int[128];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _XtextLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
            case 1: {
                return ANY_OTHER;
            } 
            // fall through
            case 49:
                break;
          case 2: 
            { return ID;
            } 
            // fall through
            case 50:
                break;
          case 3: 
            { return INT;
            } 
            // fall through
            case 51:
                break;
          case 4: 
            { return WHITE_SPACE;
            } 
            // fall through
            case 52:
                break;
            case 5: {
                return BAD_CHARACTER;
            } 
            // fall through
            case 53:
                break;
            case 6: {
                return ASTERISK_KEYWORD;
            } 
            // fall through
            case 54:
                break;
            case 7: {
                return PLUS_KEYWORD;
            } 
            // fall through
            case 55:
                break;
            case 8: {
                return R_BRACKET_KEYWORD;
            } 
            // fall through
            case 56:
                break;
            case 9: {
                return ACX_MARK_KEYWORD;
            } 
            // fall through
            case 57:
                break;
            case 10: {
                return EQUALS_KEYWORD;
            } 
            // fall through
            case 58:
                break;
            case 11: {
                return R_ANGLE_BRACKET_KEYWORD;
            } 
            // fall through
            case 59:
                break;
            case 12: {
                return AT_SIGN_KEYWORD;
            }
            // fall through
            case 60:
                break;
            case 13: {
                return QUES_MARK_KEYWORD;
            } 
            // fall through
            case 61:
                break;
            case 14: {
                return R_SQUARE_BRACKET_KEYWORD;
            } 
            // fall through
            case 62:
                break;
            case 15: {
                return L_ANGLE_BRACKET_KEYWORD;
            } 
            // fall through
            case 63:
                break;
            case 16: {
                return PIPE_KEYWORD;
            } 
            // fall through
            case 64:
                break;
            case 17: {
                return L_SQUARE_BRACKET_KEYWORD;
            } 
            // fall through
            case 65:
                break;
            case 18: {
                return COLON_KEYWORD;
            } 
            // fall through
            case 66:
                break;
            case 19: {
                return DOT_KEYWORD;
            } 
            // fall through
            case 67:
                break;
            case 20: {
                return COMMA_KEYWORD;
            } 
            // fall through
            case 68:
                break;
            case 21: {
                return L_BRACKET_KEYWORD;
            } 
            // fall through
            case 69:
                break;
            case 22: {
                return AMPERSAND_KEYWORD;
            } 
            // fall through
            case 70:
                break;
            case 23: {
                return R_BRACE_KEYWORD;
            } 
            // fall through
            case 71:
                break;
            case 24: {
                return SEMICOLON_KEYWORD;
            } 
            // fall through
            case 72:
                break;
            case 25: {
                return L_BRACE_KEYWORD;
            } 
            // fall through
            case 73:
                break;
            case 26:
            { return STRING;
            } 
            // fall through
            case 74:
                break;
            case 27:
            { return SL_COMMENT;
            } 
            // fall through
            case 75:
                break;
            case 28: {
                return AS_KEYWORD;
            } 
            // fall through
            case 76:
                break;
            case 29: {
                return PLUS_EQUALS_KEYWORD;
            } 
            // fall through
            case 77:
                break;
            case 30: {
                return PRED_KEYWORD;
            } 
            // fall through
            case 78:
                break;
            case 31: {
                return QUES_EQUALS_KEYWORD;
            } 
            // fall through
            case 79:
                break;
            case 32: {
                return COLONS_KEYWORD;
            } 
            // fall through
            case 80:
                break;
            case 33: {
                return WEAK_PRED_KEYWORD;
            } 
            // fall through
            case 81:
                break;
            case 34: {
                return RANGE_KEYWORD;
            } 
            // fall through
            case 82:
                break;
            case 35: {
                return EOF_KEY_KEYWORD;
            } 
            // fall through
            case 83:
                break;
            case 36: {
                return ML_COMMENT;
            } 
            // fall through
            case 84:
                break;
            case 37: {
                return ENUM_KEYWORD;
            } 
            // fall through
            case 85:
                break;
            case 38: {
                return TRUE_KEYWORD;
            } 
            // fall through
            case 86:
                break;
            case 39: {
                return WITH_KEYWORD;
            } 
            // fall through
            case 87:
                break;
            case 40: {
                return FALSE_KEYWORD;
            } 
            // fall through
            case 88:
                break;
            case 41: {
                return IMPORT_KEYWORD;
            } 
            // fall through
            case 89:
                break;
            case 42: {
                return HIDDEN_KEYWORD;
            } 
            // fall through
            case 90:
                break;
            case 43: {
                return GRAMMAR_KEYWORD;
            }
            // fall through
            case 91:
                break;
            case 44: {
                return RETURNS_KEYWORD;
            } 
            // fall through
            case 92:
                break;
            case 45: {
                return CURRENT_KEYWORD;
            } 
            // fall through
            case 93:
                break;
            case 46: {
                return GENERATE_KEYWORD;
            } 
            // fall through
            case 94:
                break;
            case 47: {
                return TERMINAL_KEYWORD;
            } 
            // fall through
            case 95:
                break;
            case 48: {
                return FRAGMENT_KEYWORD;
            } 
            // fall through
            case 96:
                break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
