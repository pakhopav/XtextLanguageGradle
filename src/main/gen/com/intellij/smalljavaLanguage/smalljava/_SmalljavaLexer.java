/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.intellij.smalljavaLanguage.smalljava;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.smalljavaLanguage.smalljava.psi.SmalljavaTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Smalljava.flex</tt>
 */
public class _SmalljavaLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;
    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    /* The ZZ_CMAP_Z table has 272 entries */
    static final char ZZ_CMAP_Z[] = zzUnpackCMap(
            "\1\0\1\100\1\200\u010d\100");
    /* The ZZ_CMAP_Y table has 192 entries */
    static final char ZZ_CMAP_Y[] = zzUnpackCMap(
            "\1\0\1\1\1\2\175\3\1\4\77\3");
    /* The ZZ_CMAP_A table has 320 entries */
    static final char ZZ_CMAP_A[] = zzUnpackCMap(
            "\11\0\1\14\1\6\2\10\1\7\22\0\1\14\1\0\1\4\4\0\1\11\1\41\1\43\1\13\1\0\1\42" +
                    "\1\0\1\31\1\12\12\3\1\0\1\23\1\0\1\47\3\0\32\2\1\0\1\5\1\0\1\1\1\2\1\0\1\16" +
                    "\1\46\1\17\1\36\1\22\1\50\1\21\1\51\1\24\1\2\1\20\1\32\1\25\1\35\1\26\1\15" +
                    "\1\2\1\27\1\33\1\30\1\45\1\44\1\52\1\34\2\2\1\37\1\0\1\40\7\0\1\10\242\0\2" +
                    "\10\26\0");
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };
    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\2\1\1\2\1\3\1\1\1\4\1\5\2\1" +
                    "\3\2\1\6\3\2\1\7\2\2\1\10\1\11\1\12" +
                    "\1\13\1\14\1\15\1\2\1\0\1\16\5\0\7\2" +
                    "\1\17\3\2\1\20\4\2\1\21\1\0\14\2\1\22" +
                    "\2\2\1\21\1\0\1\23\1\0\5\2\1\24\3\2" +
                    "\1\25\1\26\1\2\1\27\1\2\2\0\4\2\1\30" +
                    "\3\2\1\31\1\32\1\23\3\2\1\33\1\2\1\34" +
                    "\1\35\1\36\1\37\1\2\1\40\1\2\1\41";
    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\53" +
                    "\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\53\0\u0204\0\u022f" +
                    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\53\0\53\0\53\0\53" +
                    "\0\53\0\53\0\u0306\0\327\0\53\0\u0331\0\u012d\0\u035c" +
                    "\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4" +
                    "\0\u04df\0\201\0\u050a\0\u0535\0\u0560\0\53\0\u058b\0\u05b6" +
                    "\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e" +
                    "\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866" +
                    "\0\201\0\u0891\0\u08bc\0\53\0\u08e7\0\u0912\0\u093d\0\u0968" +
                    "\0\u0993\0\u09be\0\u09e9\0\u0a14\0\201\0\u0a3f\0\u0a6a\0\u0a95" +
                    "\0\201\0\201\0\u0ac0\0\201\0\u0aeb\0\u0b16\0\u0912\0\u0b41" +
                    "\0\u0b6c\0\u0b97\0\u0bc2\0\201\0\u0bed\0\u0c18\0\u0c43\0\201" +
                    "\0\201\0\53\0\u0c6e\0\u0c99\0\u0cc4\0\201\0\u0cef\0\201" +
                    "\0\201\0\201\0\201\0\u0d1a\0\201\0\u0d45\0\201";
    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\5\1\6\1\2\2\7\1\10" +
                    "\1\11\1\12\1\2\1\7\1\13\1\4\1\14\2\4" +
                    "\1\15\1\16\1\17\2\4\1\20\1\21\1\22\1\4" +
                    "\1\23\1\4\1\24\1\4\1\25\1\26\1\27\1\30" +
                    "\1\31\3\4\1\32\1\33\2\4\55\0\1\4\12\0" +
                    "\6\4\1\0\5\4\1\0\5\4\5\0\3\4\1\0" +
                    "\3\4\2\0\2\4\11\0\6\4\1\0\5\4\1\0" +
                    "\5\4\5\0\3\4\1\0\3\4\3\0\1\5\47\0" +
                    "\4\34\1\35\1\36\45\34\6\0\2\7\4\0\1\7" +
                    "\36\0\5\37\1\40\3\37\1\35\41\37\12\0\1\41" +
                    "\1\42\41\0\2\4\11\0\1\4\1\43\4\4\1\0" +
                    "\3\4\1\44\1\4\1\0\5\4\5\0\1\4\1\45" +
                    "\1\4\1\0\3\4\2\0\2\4\11\0\6\4\1\0" +
                    "\5\4\1\0\1\46\4\4\5\0\3\4\1\0\3\4" +
                    "\2\0\2\4\11\0\6\4\1\0\5\4\1\0\1\47" +
                    "\1\4\1\50\2\4\5\0\3\4\1\0\3\4\2\0" +
                    "\2\4\11\0\6\4\1\0\1\4\1\51\3\4\1\0" +
                    "\5\4\5\0\3\4\1\0\1\52\2\4\2\0\2\4" +
                    "\11\0\5\4\1\53\1\0\5\4\1\0\5\4\5\0" +
                    "\3\4\1\0\3\4\2\0\2\4\11\0\6\4\1\0" +
                    "\3\4\1\54\1\4\1\0\5\4\5\0\3\4\1\0" +
                    "\1\4\1\55\1\4\13\0\1\56\41\0\2\4\11\0" +
                    "\6\4\1\0\5\4\1\0\5\4\5\0\1\4\1\57" +
                    "\1\4\1\0\3\4\2\0\2\4\11\0\5\4\1\60" +
                    "\1\0\5\4\1\0\5\4\5\0\1\4\1\61\1\4" +
                    "\1\0\3\4\2\0\2\4\11\0\1\4\1\62\4\4" +
                    "\1\0\5\4\1\0\5\4\5\0\3\4\1\0\3\4" +
                    "\6\34\3\0\42\34\6\37\3\0\42\37\6\63\2\0" +
                    "\43\63\13\42\1\64\37\42\2\0\2\4\11\0\2\4" +
                    "\1\65\3\4\1\0\5\4\1\0\5\4\5\0\3\4" +
                    "\1\0\3\4\2\0\2\4\11\0\6\4\1\0\1\66" +
                    "\1\4\1\67\2\4\1\0\5\4\5\0\3\4\1\0" +
                    "\3\4\2\0\2\4\11\0\6\4\1\0\5\4\1\0" +
                    "\5\4\5\0\2\4\1\70\1\0\3\4\2\0\2\4" +
                    "\11\0\1\4\1\71\4\4\1\0\5\4\1\0\5\4" +
                    "\5\0\3\4\1\0\3\4\2\0\2\4\11\0\6\4" +
                    "\1\0\5\4\1\0\1\4\1\72\3\4\5\0\3\4" +
                    "\1\0\3\4\2\0\2\4\11\0\6\4\1\0\4\4" +
                    "\1\73\1\0\5\4\5\0\3\4\1\0\3\4\2\0" +
                    "\2\4\11\0\1\74\5\4\1\0\5\4\1\0\5\4" +
                    "\5\0\3\4\1\0\3\4\2\0\2\4\11\0\6\4" +
                    "\1\0\4\4\1\75\1\0\5\4\5\0\3\4\1\0" +
                    "\3\4\2\0\2\4\11\0\6\4\1\0\5\4\1\0" +
                    "\5\4\5\0\1\4\1\76\1\4\1\0\3\4\2\0" +
                    "\2\4\11\0\6\4\1\0\1\77\4\4\1\0\5\4" +
                    "\5\0\3\4\1\0\3\4\2\0\2\4\11\0\1\100" +
                    "\5\4\1\0\5\4\1\0\5\4\5\0\3\4\1\0" +
                    "\3\4\2\0\2\4\11\0\6\4\1\0\5\4\1\0" +
                    "\5\4\5\0\3\4\1\0\2\4\1\101\2\0\2\4" +
                    "\11\0\6\4\1\0\5\4\1\0\1\102\4\4\5\0" +
                    "\3\4\1\0\3\4\2\0\2\4\11\0\6\4\1\0" +
                    "\5\4\1\0\1\103\4\4\5\0\3\4\1\0\3\4" +
                    "\6\0\1\104\1\105\43\0\12\42\1\106\1\107\37\42" +
                    "\2\0\2\4\11\0\3\4\1\110\2\4\1\0\5\4" +
                    "\1\0\5\4\5\0\3\4\1\0\3\4\2\0\2\4" +
                    "\11\0\6\4\1\0\5\4\1\0\5\4\5\0\1\111" +
                    "\2\4\1\0\3\4\2\0\2\4\11\0\6\4\1\0" +
                    "\4\4\1\112\1\0\5\4\5\0\3\4\1\0\3\4" +
                    "\2\0\2\4\11\0\6\4\1\0\5\4\1\0\1\113" +
                    "\4\4\5\0\3\4\1\0\3\4\2\0\2\4\11\0" +
                    "\6\4\1\0\5\4\1\0\1\4\1\114\3\4\5\0" +
                    "\3\4\1\0\3\4\2\0\2\4\11\0\5\4\1\115" +
                    "\1\0\5\4\1\0\5\4\5\0\3\4\1\0\3\4" +
                    "\2\0\2\4\11\0\5\4\1\116\1\0\5\4\1\0" +
                    "\5\4\5\0\3\4\1\0\3\4\2\0\2\4\11\0" +
                    "\6\4\1\0\2\4\1\117\2\4\1\0\5\4\5\0" +
                    "\3\4\1\0\3\4\2\0\2\4\11\0\6\4\1\0" +
                    "\5\4\1\0\5\4\5\0\1\4\1\120\1\4\1\0" +
                    "\3\4\2\0\2\4\11\0\5\4\1\121\1\0\5\4" +
                    "\1\0\5\4\5\0\3\4\1\0\3\4\2\0\2\4" +
                    "\11\0\6\4\1\0\5\4\1\0\1\4\1\122\3\4" +
                    "\5\0\3\4\1\0\3\4\2\0\2\4\11\0\5\4" +
                    "\1\123\1\0\5\4\1\0\5\4\5\0\3\4\1\0" +
                    "\3\4\2\0\2\4\11\0\6\4\1\0\5\4\1\0" +
                    "\1\124\4\4\5\0\3\4\1\0\3\4\2\0\2\4" +
                    "\11\0\6\4\1\0\5\4\1\0\1\4\1\125\3\4" +
                    "\5\0\3\4\1\0\3\4\6\0\1\104\57\0\1\126" +
                    "\37\0\12\42\1\127\1\107\37\42\2\0\2\4\11\0" +
                    "\1\4\1\130\4\4\1\0\5\4\1\0\5\4\5\0" +
                    "\3\4\1\0\3\4\2\0\2\4\11\0\1\4\1\131" +
                    "\4\4\1\0\5\4\1\0\5\4\5\0\3\4\1\0" +
                    "\3\4\2\0\2\4\11\0\5\4\1\132\1\0\5\4" +
                    "\1\0\5\4\5\0\3\4\1\0\3\4\2\0\2\4" +
                    "\11\0\6\4\1\0\1\133\4\4\1\0\5\4\5\0" +
                    "\3\4\1\0\3\4\2\0\2\4\11\0\6\4\1\0" +
                    "\5\4\1\0\1\4\1\134\3\4\5\0\3\4\1\0" +
                    "\3\4\2\0\2\4\11\0\6\4\1\0\5\4\1\0" +
                    "\3\4\1\135\1\4\5\0\3\4\1\0\3\4\2\0" +
                    "\2\4\11\0\6\4\1\0\3\4\1\136\1\4\1\0" +
                    "\5\4\5\0\3\4\1\0\3\4\2\0\2\4\11\0" +
                    "\6\4\1\0\3\4\1\137\1\4\1\0\5\4\5\0" +
                    "\3\4\1\0\3\4\2\0\2\4\11\0\6\4\1\0" +
                    "\3\4\1\140\1\4\1\0\5\4\5\0\3\4\1\0" +
                    "\3\4\2\0\2\4\11\0\5\4\1\141\1\0\5\4" +
                    "\1\0\5\4\5\0\3\4\1\0\3\4\12\0\1\142" +
                    "\42\0\2\4\11\0\4\4\1\143\1\4\1\0\5\4" +
                    "\1\0\5\4\5\0\3\4\1\0\3\4\2\0\2\4" +
                    "\11\0\6\4\1\0\4\4\1\144\1\0\5\4\5\0" +
                    "\3\4\1\0\3\4\2\0\2\4\11\0\2\4\1\145" +
                    "\3\4\1\0\5\4\1\0\5\4\5\0\3\4\1\0" +
                    "\3\4\2\0\2\4\11\0\2\4\1\146\3\4\1\0" +
                    "\5\4\1\0\5\4\5\0\3\4\1\0\3\4\2\0" +
                    "\2\4\11\0\6\4\1\0\5\4\1\0\4\4\1\147" +
                    "\5\0\3\4\1\0\3\4\2\0\2\4\11\0\6\4" +
                    "\1\0\4\4\1\150\1\0\5\4\5\0\3\4\1\0" +
                    "\3\4\2\0\2\4\11\0\6\4\1\0\5\4\1\0" +
                    "\3\4\1\151\1\4\5\0\3\4\1\0\3\4\2\0" +
                    "\2\4\11\0\5\4\1\152\1\0\5\4\1\0\5\4" +
                    "\5\0\3\4\1\0\3\4\2\0\2\4\11\0\5\4" +
                    "\1\153\1\0\5\4\1\0\5\4\5\0\3\4\1\0" +
                    "\3\4\2\0\2\4\11\0\6\4\1\0\4\4\1\154" +
                    "\1\0\5\4\5\0\3\4\1\0\3\4\2\0\2\4" +
                    "\11\0\6\4\1\0\5\4\1\0\1\4\1\155\3\4" +
                    "\5\0\3\4\1\0\3\4\2\0\2\4\11\0\5\4" +
                    "\1\156\1\0\5\4\1\0\5\4\5\0\3\4\1\0" +
                    "\3\4\2\0\2\4\11\0\6\4\1\0\5\4\1\0" +
                    "\4\4\1\157\5\0\3\4\1\0\3\4";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\5\1\1\11\5\1\1\11\6\1\6\11" +
                    "\1\1\1\0\1\11\5\0\13\1\1\11\5\1\1\0" +
                    "\17\1\1\11\1\0\1\1\1\0\16\1\2\0\12\1" +
                    "\1\11\15\1";
    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
    /**
     * the input device
     */
    private java.io.Reader zzReader;
    /**
     * the current state of the DFA
     */
    private int zzState;
    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;
    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";
    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;
    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;
    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;
    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;
    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;
    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;
    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /* user code: */
    public _SmalljavaLexer() {
        this((java.io.Reader) null);
    }

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _SmalljavaLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Translates characters to character classes
     * Chosen bits are [9, 6, 6]
     * Total runtime size is 1568 bytes
     */
    public static int ZZ_CMAP(int ch) {
        return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch >> 12] | ((ch >> 6) & 0x3f)] << 6) | (ch & 0x3f)];
    }

    private static int[] zzUnpackAction() {
        int[] result = new int[111];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[111];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[3440];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[111];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < packed.length()) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return ANY_OTHER;
                    }
                    // fall through
                    case 34:
                        break;
                    case 2: {
                        return ID;
                    }
                    // fall through
                    case 35:
                        break;
                    case 3: {
                        return INT;
                    }
                    // fall through
                    case 36:
                        break;
                    case 4: {
                        return WHITE_SPACE;
                    }
                    // fall through
                    case 37:
                        break;
                    case 5: {
                        return BAD_CHARACTER;
                    }
                    // fall through
                    case 38:
                        break;
                    case 6: {
                        return SEMICOLON_KEYWORD;
                    }
                    // fall through
                    case 39:
                        break;
                    case 7: {
                        return DOT_KEYWORD;
                    }
                    // fall through
                    case 40:
                        break;
                    case 8: {
                        return L_BRACE_KEYWORD;
                    }
                    // fall through
                    case 41:
                        break;
                    case 9: {
                        return R_BRACE_KEYWORD;
                    }
                    // fall through
                    case 42:
                        break;
                    case 10: {
                        return L_BRACKET_KEYWORD;
                    }
                    // fall through
                    case 43:
                        break;
                    case 11: {
                        return COMMA_KEYWORD;
                    }
                    // fall through
                    case 44:
                        break;
                    case 12: {
                        return R_BRACKET_KEYWORD;
                    }
                    // fall through
                    case 45:
                        break;
                    case 13: {
                        return EQUALS_KEYWORD;
                    }
                    // fall through
                    case 46:
                        break;
                    case 14: {
                        return STRING;
                    }
                    // fall through
                    case 47:
                        break;
                    case 15: {
                        return IF_KEYWORD;
                    }
                    // fall through
                    case 48:
                        break;
                    case 16: {
                        return KEYWORD_1;
                    }
                    // fall through
                    case 49:
                        break;
                    case 17: {
                        return SL_COMMENT;
                    }
                    // fall through
                    case 50:
                        break;
                    case 18: {
                        return NEW_KEYWORD;
                    }
                    // fall through
                    case 51:
                        break;
                    case 19: {
                        return ML_COMMENT;
                    }
                    // fall through
                    case 52:
                        break;
                    case 20: {
                        return ELSE_KEYWORD;
                    }
                    // fall through
                    case 53:
                        break;
                    case 21: {
                        return TRUE_KEYWORD;
                    }
                    // fall through
                    case 54:
                        break;
                    case 22: {
                        return THIS_KEYWORD;
                    }
                    // fall through
                    case 55:
                        break;
                    case 23: {
                        return NULL_KEYWORD;
                    }
                    // fall through
                    case 56:
                        break;
                    case 24: {
                        return CLASS_KEYWORD;
                    }
                    // fall through
                    case 57:
                        break;
                    case 25: {
                        return SUPER_KEYWORD;
                    }
                    // fall through
                    case 58:
                        break;
                    case 26: {
                        return FALSE_KEYWORD;
                    }
                    // fall through
                    case 59:
                        break;
                    case 27: {
                        return PUBLIC_KEYWORD;
                    }
                    // fall through
                    case 60:
                        break;
                    case 28: {
                        return IMPORT_KEYWORD;
                    }
                    // fall through
                    case 61:
                        break;
                    case 29: {
                        return RETURN_KEYWORD;
                    }
                    // fall through
                    case 62:
                        break;
                    case 30: {
                        return PACKAGE_KEYWORD;
                    }
                    // fall through
                    case 63:
                        break;
                    case 31: {
                        return PRIVATE_KEYWORD;
                    }
                    // fall through
                    case 64:
                        break;
                    case 32: {
                        return EXTENDS_KEYWORD;
                    }
                    // fall through
                    case 65:
                        break;
                    case 33: {
                        return PROTECTED_KEYWORD;
                    }
                    // fall through
                    case 66:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
